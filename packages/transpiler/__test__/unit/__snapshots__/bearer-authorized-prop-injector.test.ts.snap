// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`bearer-authorized required property do nothing match snapshot 1`] = `
Object {
  "file": "do-nothing.tsx",
  "postContent": "import { Component, Prop } from '@bearer/core';
@Component({
    tag: \\"feature-action\\",
    styleUrl: \\"feature.css\\",
    shadow: true
})
class RootComponent {
    renderFromANotherProp() {
        return <sponge-bob title=\\"Sponge element\\"/>;
    }
    render() {
        return <div />;
    }
    constructor() {
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
@Component({
    tag: 'sponge-bob'
})
class SubComponent {
    render() {
        return <div title=\\"spongeBNob\\"/>;
    }
    constructor() {
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
",
}
`;

exports[`bearer-authorized required property inject prop to tsx element match snapshot 1`] = `
Object {
  "file": "inject-prop-to-tsx-element.tsx",
  "postContent": "import { Component, Prop } from '@bearer/core';
@Component({
    tag: \\"feature-action\\",
    styleUrl: \\"feature.css\\",
    shadow: true
})
class RootComponent {
    render() {
        return (<bearer-navigator>
        <bearer-navigator-auth-screen scenarioId=\\"SPONGE_BOB\\"/>
      </bearer-navigator>);
    }
    constructor() {
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
@Component({
    tag: 'sponge-bob'
})
class SimpleComponent {
    render() {
        return (<bearer-navigator>
        <bearer-navigator-auth-screen scenarioId=\\"SPONGE_BOB\\"/>
      </bearer-navigator>);
    }
    constructor() {
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
@Component({
    tag: 'sponge-bob'
})
class WithBearerAuthorizedComponent {
    render() {
        return <bearer-authorized renderAuthorized={() => <div />} renderUnauthorized={() => <span />} scenarioId=\\"SPONGE_BOB\\"/>;
    }
    constructor() {
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
@Component({
    tag: 'sponge-bob'
})
class OverrideValueGiven {
    render() {
        return (<bearer-authorized renderAuthorized={() => <div />} renderUnauthorized={() => <span />} scenarioId=\\"SPONGE_BOB\\"/>);
    }
    constructor() {
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
",
}
`;
