// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Prop set decorator units complete options match snapshot 1`] = `
Object {
  "file": "complete-options.tsx",
  "postContent": "import { BearerRef, State, Prop, Component, Listen, Intent, Watch, Event, EventEmitter } from '@bearer/core';
@Component({
    tag: \\"no-options-action\\",
    styleUrl: \\"noOptions.css\\",
    shadow: true
})
class NoOptionsComponent {
    @Prop({ mutable: true })
    aValueThatChanges: String;
    @Prop()
    aStaticValue: String;
    @State()
    aStringInput: BearerRef<string> = 'ok';
    @Listen(\\"body:bearer-SPONGE_BOB-no-options-aStringInputSaved\\")
    aStringInputRefIdChanged(event) {
        if (this.aStringInputRefId !== event.detail.referenceId) {
            this.aStringInputRefId = event.detail.referenceId;
        }
        else {
            this._loadAStringInput();
        }
    }
    _loadAStringInput = () => {
        this.fetcherRetrieveAStringInput({ referenceId: this.aStringInputRefId }).then(({ data }: {
            data: BearerRef<string>;
        }) => {
            this.aStringInput = data;
        });
    };
    private fetcherRetrieveAStringInput;
    @Watch(\\"aStringInputRefId\\")
    _watchAStringInput(newValueName: string) {
        if (newValueName) {
            this._loadAStringInput();
        }
    }
    @Prop({ \\"mutable\\": true })
    aStringInputRefId: string;
    constructor() {
        Intent(\\"retrieveAStringInput\\")(this, \\"fetcherRetrieveAStringInput\\");
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
        if (this.aStringInputRefId) {
            this._loadAStringInput();
        }
    }
    @Event({ eventName: \\"no-options-action-prop-set\\", bubbles: true, cancelable: true })
    propSetEmitter: EventEmitter;
    @Watch(\\"aValueThatChanges\\")
    aValueThatChangesPropSetWatcher(newValue) {
        this.propSetEmitter.emit({ aValueThatChanges: newValue });
    }
    @Watch(\\"aStringInputRefId\\")
    aStringInputRefIdPropSetWatcher(newValue) {
        this.propSetEmitter.emit({ aStringInputRefId: newValue });
    }
}
",
}
`;
