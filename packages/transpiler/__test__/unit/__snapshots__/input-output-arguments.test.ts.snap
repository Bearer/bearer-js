// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`input and output arguments file: input-output-arguments.tsx generates the refIds properly 1`] = `
"import { BearerRef, Output, RootComponent, Input, BearerFetch, EventEmitter, Event, Intent, State, Watch } from '@bearer/core';
type Farmer = {
    id: string;
    name: string;
};
type Goat = {
    id: string;
    name: string;
    milk: number;
};
@RootComponent({
    group: 'input-output-arguments',
    role: 'action'
})
class InputOutputArgumentsComponent {
    @Input()
    farmer: BearerRef<Farmer>;
    @Output({ intentArguments: ['farmer'] })
    goat: BearerRef<Goat>;
    componentDidLoad() {
        if (this.goatRefId) {
            this._loadGoat();
        }
    }
    @Intent(\\"saveGoat\\")
    saveGoat: BearerFetch<BearerRef<Goat>>;
    @Event(\\"goat\\")
    goatSaved: EventEmitter<{
        referenceId: string;
        goat: BearerRef<Goat>;
    }>;
    @State()
    goatInitial: BearerRef<Goat>;
    @State()
    goat: BearerRef<Goat>;
    @Prop({ \\"mutable\\": true })
    goatRefId: string;
    @Watch(\\"goat\\")
    goatSavedWatcher(newValue) {
        this.saveGoat({ body: { goat: newValue }, referenceId: this.goatRefId }).then(({ referenceId, data }) => {
            this.goatSaved.emit({ referenceId, goat: data || this.goat });
            this.goatRefId = referenceId;
        });
        this.goatInitial = null;
    }
    @Intent(\\"retrieveGoat\\")
    fetcherRetrieveGoat;
    _loadGoat = () => {
        this.fetcherRetrieveGoat({ referenceId: this.goatRefId, farmerId: this.farmerRefId }).then(({ data }: {
            data: BearerRef<Goat>;
        }) => {
            if (data) {
                this.goatInitial = data;
            }
        });
    };
}
"
`;
