// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Output decorator units complete options match snapshot 1`] = `
Object {
  "file": "complete-options.tsx",
  "postContent": "import { BearerRef, Component, BearerFetch, EventEmitter, Event, Intent, State, Watch, Prop } from '@bearer/core';
type Farmer = {
    id: string;
    name: string;
};
@Component({
    tag: \\"no-options-action\\",
    styleUrl: \\"noOptions.css\\",
    shadow: true
})
class NoOptionsComponent {
    private saveFarmer: BearerFetch<BearerRef<Farmer>
    // // generate this
    // @Event() farmerSaved: EventEmitter<Farmer>
    // @State() farmer: BearerRef<Farmer>
    // @Intent('setFarmer') setFarmer: BearerFetch<Farmer>
    // @Watch('farmer')
    // farmerchangeHandler(newValue: BearerRef<Farmer>) {
    //   if (newValue) {
    //     this.setFarmer().then(({ data, referenceId }) => {
    //       this.farmerSaved.emit({ referenceId, farmer: data }) // farmer
    //     })
    //   } else {
    //     this.farmerSaved.emit({ farmer: newValue })
    //   }
    // }
    >;
    @Event({ eventName: \\"bearer|SPONGE_BOB|no-options|farmerSaved\\" })
    farmerSaved: EventEmitter<{
        referenceId: string;
        farmer: BearerRef<Farmer>;
    }>;
    @State()
    farmer: BearerRef<Farmer>;
    @State()
    farmerRefId: string;
    @Watch(\\"farmer\\")
    farmerSavedWatcher(newValue) {
        this.saveFarmer({ body: { farmer: newValue }, referenceId: this.farmerRefId }).then(({ referenceId, data }) => {
            this.farmerSaved.emit({ referenceId, farmer: data || this.farmer });
            this.farmerRefId = referenceId;
        });
    }
    private milkWithAbottle: BearerFetch<BearerRef<Farmer>>;
    @Event({ eventName: \\"bearer|SPONGE_BOB|no-options|milked\\" })
    milked: EventEmitter<{
        aPandaKey: string;
        farmerAndPanda: BearerRef<Farmer>;
    }>;
    @State()
    farmerAndPanda: BearerRef<Farmer> = {};
    @State()
    farmerAndPandaRefId: string;
    @Watch(\\"aPanda\\")
    milkedWatcher(newValue) {
        this.milkWithAbottle({ body: { farmerAndPanda: newValue }, referenceId: this.farmerAndPandaRefId }).then(({ referenceId: aPandaKey, data }) => {
            this.milked.emit({ aPandaKey, farmerAndPanda: data || this.farmerAndPanda });
            this.farmerAndPandaRefId = aPandaKey;
        });
    }
    constructor() {
        Intent(\\"saveFarmer\\")(this, \\"saveFarmer\\");
        Intent(\\"milkWithAbottle\\")(this, \\"milkWithAbottle\\");
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
    }
}
",
}
`;
