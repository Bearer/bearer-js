// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Output decorator units file: complete-options.tsx generates stuff 1`] = `
"import { BearerRef, Output, RootComponent, Input, BearerFetch, EventEmitter, Event, Intent, State, Watch } from '@bearer/core';
type Farmer = {
    id: string;
    name: string;
};
@RootComponent({
    name: 'output-optionscomplete'
})
class NoOptionsComponent {
    @Input()
    farmer: BearerRef<Farmer>;
    // write this
    @Output()
    farmer: BearerRef<Farmer>;
    // // generate this
    // @Event() farmerSaved: EventEmitter<Farmer>
    // @State() farmer: BearerRef<Farmer>
    // @Intent('setFarmer') setFarmer: BearerFetch<Farmer>
    // @Watch('farmer')
    // farmerchangeHandler(newValue: BearerRef<Farmer>) {
    //   if (newValue) {
    //     this.setFarmer().then(({ data, referenceId }) => {
    //       this.farmerSaved.emit({ referenceId, farmer: data }) // farmer
    //     })
    //   } else {
    //     this.farmerSaved.emit({ farmer: newValue })
    //   }
    // }
    @Output({
        eventName: 'milked',
        propertyWatchedName: 'aPanda',
        referenceKeyName: 'aPandaKey',
        intentName: 'milkWithAbottle',
        intentReferenceIdKeyName: 'anotherProp',
        intentReferenceIdValue: 'intentReferenceIdValueValue',
        intentArguments: ['farmer', 'spongeBobOverrided', 'authId'],
        intentPropertyName: 'intentPropertyNameOption',
        autoLoad: false
    })
    farmerAndPanda: BearerRef<Farmer> = {};
    componentDidLoad() {
        if (this.farmerId) {
            this._loadFarmer();
        }
    }
    @Intent(\\"saveFarmer\\")
    saveFarmer: BearerFetch<BearerRef<Farmer>
    // // generate this
    // @Event() farmerSaved: EventEmitter<Farmer>
    // @State() farmer: BearerRef<Farmer>
    // @Intent('setFarmer') setFarmer: BearerFetch<Farmer>
    // @Watch('farmer')
    // farmerchangeHandler(newValue: BearerRef<Farmer>) {
    //   if (newValue) {
    //     this.setFarmer().then(({ data, referenceId }) => {
    //       this.farmerSaved.emit({ referenceId, farmer: data }) // farmer
    //     })
    //   } else {
    //     this.farmerSaved.emit({ farmer: newValue })
    //   }
    // }
    >;
    @Event(\\"farmer\\")
    farmerSaved: EventEmitter<{
        referenceId: string;
        farmer: BearerRef<Farmer>;
    }>;
    @State()
    farmerInitial: BearerRef<Farmer>;
    @State()
    farmer: BearerRef<Farmer>;
    @Prop({ \\"mutable\\": true })
    farmerId: string;
    @Watch(\\"farmer\\")
    farmerSavedWatcher(newValue) {
        this.saveFarmer({ body: { farmer: newValue }, referenceId: this.farmerId }).then(({ referenceId, data }) => {
            this.farmerSaved.emit({ referenceId, farmer: data || this.farmer });
            this.farmerId = referenceId;
        });
        this.farmerInitial = null;
    }
    @Intent(\\"retrieveFarmer\\")
    fetcherRetrieveFarmer;
    _loadFarmer = () => {
        this.fetcherRetrieveFarmer({ referenceId: this.farmerId }).then(({ data }: {
            data: BearerRef<Farmer>;
        }) => {
            if (data) {
                this.farmerInitial = data;
            }
        });
    };
    @Intent(\\"milkWithAbottle\\")
    milkWithAbottle: BearerFetch<BearerRef<Farmer>>;
    @Event(\\"aPanda\\")
    milked: EventEmitter<{
        aPandaKey: string;
        farmerAndPanda: BearerRef<Farmer>;
    }>;
    @State()
    farmerAndPandaInitial: BearerRef<Farmer> = {};
    @State()
    farmerAndPanda: BearerRef<Farmer> = {};
    @Prop({ \\"mutable\\": true })
    farmerAndPandaId: string;
    @Watch(\\"aPanda\\")
    milkedWatcher(newValue) {
        this.milkWithAbottle({ body: { intentPropertyNameOption: newValue }, anotherProp: this.intentReferenceIdValueValue }).then(({ referenceId: aPandaKey, data }) => {
            this.milked.emit({ aPandaKey, farmerAndPanda: data || this.farmerAndPanda });
            this.farmerAndPandaId = aPandaKey;
        });
        this.farmerAndPandaInitial = null;
    }
    @Intent(\\"retrieveFarmerAndPanda\\")
    fetcherRetrieveFarmerAndPanda;
    _loadFarmerAndPanda = () => {
        this.fetcherRetrieveFarmerAndPanda({ anotherProp: this.farmerAndPandaId, farmerId: this.farmerId, spongeBobOverrided: this.spongeBobOverrided, authId: this.authId }).then(({ data }: {
            data: BearerRef<Farmer>;
        }) => {
            if (data) {
                this.farmerAndPandaInitial = data;
            }
        });
    };
}
"
`;
