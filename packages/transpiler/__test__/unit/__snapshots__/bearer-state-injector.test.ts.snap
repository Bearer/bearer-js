// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Bearer State Injector do not process match snapshot 1`] = `
Object {
  "file": "do-not-process.ts",
  "postContent": "class DoNotProcess {
    constructor() { }
}
",
}
`;

exports[`Bearer State Injector do not rewatch property match snapshot 1`] = `
Object {
  "file": "do-not-rewatch-property.tsx",
  "postContent": "import { BearerState, Watch, State } from '@bearer/core';
class UpdateExistingPropertyWatcher {
    @BearerState()
    @State()
    pullRequests: Array<any> = [];
    @BearerState({ statePropName: 'repo' })
    @State()
    repository: {} = {};
    constructor() { }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Watch('pullRequests')
    pullRequestsChangeHandler(newPullRequest: Array<any>, oldValue: any[]) { this.bearerContext.update(\\"pullRequests\\", newPullRequest); console.log('Prepend stuff'); }
    @Watch(\\"repository\\")
    _notifyBearerStateHandler_repository(newValue: any) { this.bearerContext.update(\\"repo\\", newValue); }
    componentWillLoad() { this.bearerContext.subscribe(this); }
    componentDidUnload() { this.bearerContext.unsubscribe(this); }
    bearerUpdateFromState = state => { this.pullRequests = state[\\"pullRequests\\"]; this.repository = state[\\"repo\\"]; };
}
",
}
`;

exports[`Bearer State Injector does not re add component lifecycle methods match snapshot 1`] = `
Object {
  "file": "does-not-re-add-component-lifecycle-methods.tsx",
  "postContent": "import { BearerState, Watch, State } from '@bearer/core';
class UpdateExistingComponentLifecycleMethods {
    @BearerState()
    @State()
    pullRequests: Array<any> = [];
    // TODO: handle these use cases
    componentWillLoad() { this.bearerContext.subscribe(this); console.log('componentWillLoad'); }
    componentDidUnload() { this.bearerContext.unsubscribe(this); console.log('componentDidUnload'); }
    constructor() { }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Watch(\\"pullRequests\\")
    _notifyBearerStateHandler_pullRequests(newValue: any) { this.bearerContext.update(\\"pullRequests\\", newValue); }
    bearerUpdateFromState = state => { this.pullRequests = state[\\"pullRequests\\"]; };
}
",
}
`;

exports[`Bearer State Injector ensure decorator injected match snapshot 1`] = `
Object {
  "file": "ensure-decorator-injected.ts",
  "postContent": "import { BearerState, Watch, State } from '@bearer/core';
class AddDecoratorOnTranspile {
    @BearerState()
    @State()
    pullRequests: Array<any> = [];
    constructor() { }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Watch(\\"pullRequests\\")
    _notifyBearerStateHandler_pullRequests(newValue: any) { this.bearerContext.update(\\"pullRequests\\", newValue); }
    componentWillLoad() { this.bearerContext.subscribe(this); }
    componentDidUnload() { this.bearerContext.unsubscribe(this); }
    bearerUpdateFromState = state => { this.pullRequests = state[\\"pullRequests\\"]; };
}
",
}
`;

exports[`Bearer State Injector has bearer context present match snapshot 1`] = `
Object {
  "file": "has-bearer-context-present.tsx",
  "postContent": "import { BearerState, Prop, Watch, State } from '@bearer/core';
class HasBearerContextInjected {
    @BearerState()
    @State()
    attachPullRequests: any[] = [];
    @Prop({ context: 'bearer' })
    bearerContext: any;
    constructor() { }
    @Watch(\\"attachPullRequests\\")
    _notifyBearerStateHandler_attachPullRequests(newValue: any) { this.bearerContext.update(\\"attachPullRequests\\", newValue); }
    componentWillLoad() { this.bearerContext.subscribe(this); }
    componentDidUnload() { this.bearerContext.unsubscribe(this); }
    bearerUpdateFromState = state => { this.attachPullRequests = state[\\"attachPullRequests\\"]; };
}
",
}
`;
