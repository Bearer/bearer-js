// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input decorator units complete options match snapshot 1`] = `
Object {
  "file": "complete-options.tsx",
  "postContent": "import { BearerRef, Component, Listen, State, Intent, Watch, Prop } from '@bearer/core';
type Farmer = {
    id: string;
    name: string;
};
type Sponge = {
    id: unknown;
    name: unknown;
};
@Component({
    tag: \\"no-options-action\\",
    styleUrl: \\"noOptions.css\\",
    shadow: true
})
class NoOptionsComponent {
    @State()
    farmer: BearerRef<Farmer>;
    @Prop({ \\"mutable\\": true })
    farmerRefId: string;
    @Listen(\\"bearer|SPONGE_BOB|farmer|saved\\")
    farmerRefIdChanged(event) { this.farmerRefId = event.detail.referenceId; }
    _loadFarmer = () => {
        this.fetcherGetFarmer().then(({ data }: {
            data: BearerRef<Farmer>;
        }) => { this.farmer = data; });
    };
    private fetcherGetFarmer;
    @Watch(\\"farmerRefId\\")
    _watchFarmer(newValueName: string) { if (newValueName) {
        this._loadFarmer();
    } }
    @State()
    aString: BearerRef<string> = \\"ok\\";
    @Prop({ \\"mutable\\": true })
    aStringRefId: string;
    @Listen(\\"bearer|SPONGE_BOB|aString|saved\\")
    aStringRefIdChanged(event) { this.aStringRefId = event.detail.referenceId; }
    _loadAString = () => {
        this.fetcherGetAString().then(({ data }: {
            data: BearerRef<string>;
        }) => { this.aString = data; });
    };
    private fetcherGetAString;
    @Watch(\\"aStringRefId\\")
    _watchAString(newValueName: string) { if (newValueName) {
        this._loadAString();
    } }
    @State()
    aStringWithoutInitializer: BearerRef<string>;
    @Prop({ \\"mutable\\": true })
    aStringWithoutInitializerRefId: string;
    @Listen(\\"bearer|SPONGE_BOB|aStringWithoutInitializer|saved\\")
    aStringWithoutInitializerRefIdChanged(event) { this.aStringWithoutInitializerRefId = event.detail.referenceId; }
    _loadAStringWithoutInitializer = () => {
        this.fetcherGetAStringWithoutInitializer().then(({ data }: {
            data: BearerRef<string>;
        }) => { this.aStringWithoutInitializer = data; });
    };
    private fetcherGetAStringWithoutInitializer;
    @Watch(\\"aStringWithoutInitializerRefId\\")
    _watchAStringWithoutInitializer(newValueName: string) { if (newValueName) {
        this._loadAStringWithoutInitializer();
    } }
    @State()
    object: BearerRef<{
        title: string;
    }> = { title: 'Guest' };
    @Prop({ \\"mutable\\": true })
    objectRefId: string;
    @Listen(\\"bearer|SPONGE_BOB|object|saved\\")
    objectRefIdChanged(event) { this.objectRefId = event.detail.referenceId; }
    _loadObject = () => {
        this.fetcherGetObject().then(({ data }: {
            data: BearerRef<{
                title: string;
            }>;
        }) => { this.object = data; });
    };
    private fetcherGetObject;
    @Watch(\\"objectRefId\\")
    _watchObject(newValueName: string) { if (newValueName) {
        this._loadObject();
    } }
    @State()
    objectWithoutInitializer: BearerRef<{
        title: string;
    }>;
    @Prop({ \\"mutable\\": true })
    objectWithoutInitializerRefId: string;
    @Listen(\\"bearer|SPONGE_BOB|objectWithoutInitializer|saved\\")
    objectWithoutInitializerRefIdChanged(event) { this.objectWithoutInitializerRefId = event.detail.referenceId; }
    _loadObjectWithoutInitializer = () => {
        this.fetcherGetObjectWithoutInitializer().then(({ data }: {
            data: BearerRef<{
                title: string;
            }>;
        }) => { this.objectWithoutInitializer = data; });
    };
    private fetcherGetObjectWithoutInitializer;
    @Watch(\\"objectWithoutInitializerRefId\\")
    _watchObjectWithoutInitializer(newValueName: string) { if (newValueName) {
        this._loadObjectWithoutInitializer();
    } }
    @State()
    spongeBob: BearerRef<Sponge>;
    @Prop({ \\"mutable\\": true })
    spongeBobRefId: string;
    @Listen(\\"bearer|SPONGE_BOB|spongeBob|saved\\")
    spongeBobRefIdChanged(event) { this.spongeBobRefId = event.detail.referenceId; }
    _loadSpongeBob = () => {
        this.fetcherGetSpongeBob().then(({ data }: {
            data: BearerRef<Sponge>;
        }) => { this.spongeBob = data; });
    };
    private fetcherGetSpongeBob;
    @Watch(\\"spongeBobRefId\\")
    _watchSpongeBob(newValueName: string) { if (newValueName) {
        this._loadSpongeBob();
    } }
    constructor() {
        Intent(\\"getFarmer\\")(this, \\"fetcherGetFarmer\\");
        Intent(\\"getAString\\")(this, \\"fetcherGetAString\\");
        Intent(\\"getAStringWithoutInitializer\\")(this, \\"fetcherGetAStringWithoutInitializer\\");
        Intent(\\"getObject\\")(this, \\"fetcherGetObject\\");
        Intent(\\"getObjectWithoutInitializer\\")(this, \\"fetcherGetObjectWithoutInitializer\\");
        Intent(\\"getSpongeBob\\")(this, \\"fetcherGetSpongeBob\\");
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
}
",
}
`;
