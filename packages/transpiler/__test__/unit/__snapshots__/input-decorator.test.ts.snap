// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Input decorator units file: complete-options.tsx generates stuff 1`] = `
"import { BearerRef, Input, RootComponent, State, Prop, Listen, Function, Watch } from '@bearer/core';
type Farmer = {
    id: string;
    name: string;
};
type Sponge = {
    id: unknown;
    name: unknown;
};
@RootComponent({
    name: 'no-options'
})
class NoOptionsComponent {
    @Input()
    farmer: BearerRef<Farmer>;
    @Input()
    aString: BearerRef<string> = 'ok';
    @Input()
    aStringWithoutInitializer: BearerRef<string>;
    @Input()
    object: BearerRef<{
        title: string;
    }> = { title: 'Guest' };
    @Input()
    objectWithoutInitializer: BearerRef<{
        title: string;
    }>;
    @Input({
        group: 'other-group',
        propertyReferenceIdName: 'patrick',
        functionReferenceIdKeyName: 'functionReferenceIdKeyNameOption',
        eventName: 'patrickWasKilled',
        functionName: 'killPatrick',
        autoLoad: false,
        functionArguments: ['farmer', 'spongeBobOverrided', 'authId']
    })
    spongeBob: BearerRef<Sponge>;
    @Input({
        propertyReferenceIdName: 'refNotOverrided'
    })
    spongeBobOverrided: BearerRef<Sponge>;
    // won't be injected by the transfomer
    @State()
    refNotOverrided: string;
    componentDidLoad() {
        if (this.farmerId) {
            this._loadFarmer();
        }
        if (this.aStringId) {
            this._loadAString();
        }
        if (this.aStringWithoutInitializerId) {
            this._loadAStringWithoutInitializer();
        }
        if (this.objectId) {
            this._loadObject();
        }
        if (this.objectWithoutInitializerId) {
            this._loadObjectWithoutInitializer();
        }
        if (this.refNotOverrided) {
            this._loadSpongeBobOverrided();
        }
    }
    @State()
    farmer: BearerRef<Farmer>;
    @Listen(\\"body:farmerSaved\\")
    farmerIdChanged(event) {
        if (this.farmerId !== event.detail.referenceId) {
            if (!this.farmerId) {
                this.farmerId = event.detail.referenceId;
            }
        }
        else {
            this._loadFarmer();
        }
    }
    _loadFarmer = () => {
        this.fetcherRetrieveFarmer({ referenceId: this.farmerId }).then(({ data }: {
            data: BearerRef<Farmer>;
        }) => {
            if (data) {
                this.farmer = data;
            }
        });
    };
    @Function(\\"retrieveFarmer\\")
    fetcherRetrieveFarmer;
    @Watch(\\"farmerId\\")
    _watchFarmer(newValueName: string) {
        if (newValueName) {
            this._loadFarmer();
        }
    }
    @Prop({ \\"mutable\\": true })
    farmerId: string;
    @State()
    aString: BearerRef<string> = 'ok';
    @Listen(\\"body:aStringSaved\\")
    aStringIdChanged(event) {
        if (this.aStringId !== event.detail.referenceId) {
            if (!this.aStringId) {
                this.aStringId = event.detail.referenceId;
            }
        }
        else {
            this._loadAString();
        }
    }
    _loadAString = () => {
        this.fetcherRetrieveAString({ referenceId: this.aStringId }).then(({ data }: {
            data: BearerRef<string>;
        }) => {
            if (data) {
                this.aString = data;
            }
        });
    };
    @Function(\\"retrieveAString\\")
    fetcherRetrieveAString;
    @Watch(\\"aStringId\\")
    _watchAString(newValueName: string) {
        if (newValueName) {
            this._loadAString();
        }
    }
    @Prop({ \\"mutable\\": true })
    aStringId: string;
    @State()
    aStringWithoutInitializer: BearerRef<string>;
    @Listen(\\"body:aStringWithoutInitializerSaved\\")
    aStringWithoutInitializerIdChanged(event) {
        if (this.aStringWithoutInitializerId !== event.detail.referenceId) {
            if (!this.aStringWithoutInitializerId) {
                this.aStringWithoutInitializerId = event.detail.referenceId;
            }
        }
        else {
            this._loadAStringWithoutInitializer();
        }
    }
    _loadAStringWithoutInitializer = () => {
        this.fetcherRetrieveAStringWithoutInitializer({ referenceId: this.aStringWithoutInitializerId }).then(({ data }: {
            data: BearerRef<string>;
        }) => {
            if (data) {
                this.aStringWithoutInitializer = data;
            }
        });
    };
    @Function(\\"retrieveAStringWithoutInitializer\\")
    fetcherRetrieveAStringWithoutInitializer;
    @Watch(\\"aStringWithoutInitializerId\\")
    _watchAStringWithoutInitializer(newValueName: string) {
        if (newValueName) {
            this._loadAStringWithoutInitializer();
        }
    }
    @Prop({ \\"mutable\\": true })
    aStringWithoutInitializerId: string;
    @State()
    object: BearerRef<{
        title: string;
    }> = { title: 'Guest' };
    @Listen(\\"body:objectSaved\\")
    objectIdChanged(event) {
        if (this.objectId !== event.detail.referenceId) {
            if (!this.objectId) {
                this.objectId = event.detail.referenceId;
            }
        }
        else {
            this._loadObject();
        }
    }
    _loadObject = () => {
        this.fetcherRetrieveObject({ referenceId: this.objectId }).then(({ data }: {
            data: BearerRef<{
                title: string;
            }>;
        }) => {
            if (data) {
                this.object = data;
            }
        });
    };
    @Function(\\"retrieveObject\\")
    fetcherRetrieveObject;
    @Watch(\\"objectId\\")
    _watchObject(newValueName: string) {
        if (newValueName) {
            this._loadObject();
        }
    }
    @Prop({ \\"mutable\\": true })
    objectId: string;
    @State()
    objectWithoutInitializer: BearerRef<{
        title: string;
    }>;
    @Listen(\\"body:objectWithoutInitializerSaved\\")
    objectWithoutInitializerIdChanged(event) {
        if (this.objectWithoutInitializerId !== event.detail.referenceId) {
            if (!this.objectWithoutInitializerId) {
                this.objectWithoutInitializerId = event.detail.referenceId;
            }
        }
        else {
            this._loadObjectWithoutInitializer();
        }
    }
    _loadObjectWithoutInitializer = () => {
        this.fetcherRetrieveObjectWithoutInitializer({ referenceId: this.objectWithoutInitializerId }).then(({ data }: {
            data: BearerRef<{
                title: string;
            }>;
        }) => {
            if (data) {
                this.objectWithoutInitializer = data;
            }
        });
    };
    @Function(\\"retrieveObjectWithoutInitializer\\")
    fetcherRetrieveObjectWithoutInitializer;
    @Watch(\\"objectWithoutInitializerId\\")
    _watchObjectWithoutInitializer(newValueName: string) {
        if (newValueName) {
            this._loadObjectWithoutInitializer();
        }
    }
    @Prop({ \\"mutable\\": true })
    objectWithoutInitializerId: string;
    @State()
    spongeBob: BearerRef<Sponge>;
    @Listen(\\"body:patrickWasKilled\\")
    patrickChanged(event) {
        if (this.patrick !== event.detail.referenceId) {
            if (!this.patrick) {
                this.patrick = event.detail.referenceId;
            }
        }
        else {
            this._loadSpongeBob();
        }
    }
    _loadSpongeBob = () => {
        this.fetcherRetrieveSpongeBob({ functionReferenceIdKeyNameOption: this.patrick, farmerId: this.farmerId, spongeBobOverridedId: this.refNotOverrided, authId: this.authId }).then(({ data }: {
            data: BearerRef<Sponge>;
        }) => {
            if (data) {
                this.spongeBob = data;
            }
        });
    };
    @Function(\\"killPatrick\\")
    fetcherRetrieveSpongeBob;
    @Watch(\\"patrick\\")
    _watchSpongeBob(newValueName: string) {
        if (newValueName) {
            this._loadSpongeBob();
        }
    }
    @Prop({ \\"mutable\\": true })
    patrick: string;
    @State()
    spongeBobOverrided: BearerRef<Sponge>;
    @Listen(\\"body:spongeBobOverridedSaved\\")
    refNotOverridedChanged(event) {
        if (this.refNotOverrided !== event.detail.referenceId) {
            if (!this.refNotOverrided) {
                this.refNotOverrided = event.detail.referenceId;
            }
        }
        else {
            this._loadSpongeBobOverrided();
        }
    }
    _loadSpongeBobOverrided = () => {
        this.fetcherRetrieveSpongeBobOverrided({ referenceId: this.refNotOverrided }).then(({ data }: {
            data: BearerRef<Sponge>;
        }) => {
            if (data) {
                this.spongeBobOverrided = data;
            }
        });
    };
    @Function(\\"retrieveSpongeBobOverrided\\")
    fetcherRetrieveSpongeBobOverrided;
    @Watch(\\"refNotOverrided\\")
    _watchSpongeBobOverrided(newValueName: string) {
        if (newValueName) {
            this._loadSpongeBobOverrided();
        }
    }
}
"
`;
