// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transpiler integration test FullComponent.tsx has correct manifest generated 1`] = `
Object {
  "file": "FullComponent.tsx",
  "manifest": Array [
    Object {
      "classname": "AttachPullRequestAction",
      "inputs": Array [
        Object {
          "name": "farmerId",
          "type": "string",
        },
        Object {
          "name": "goatId",
          "type": "string",
        },
        Object {
          "name": "feedPandaId",
          "type": "string",
        },
        Object {
          "name": "shortPandaId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [
        Object {
          "eventName": "bearer-sponge-bob-inlinedefinition",
          "name": "inlineDefinition",
          "payloadFormat": Object {
            "properties": Object {
              "inlineName": Object {
                "description": "inlineName",
                "name": "inlineName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "inlineNumber": Object {
                "description": "inlineNumber",
                "name": "inlineNumber",
                "required": true,
                "schema": Object {
                  "type": "number",
                },
              },
              "other": Object {
                "description": "other",
                "name": "other",
                "required": true,
                "schema": Object {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "properties": Object {
                    "fullPandaName": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "fullPandaName",
                  ],
                  "type": "object",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-feedpandasaved",
          "name": "feedPandaSaved",
          "payloadFormat": Object {
            "properties": Object {
              "feedPanda": Object {
                "description": "feedPanda",
                "name": "feedPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
              "referenceId": Object {
                "description": "referenceId",
                "name": "referenceId",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-spongebobdsaved",
          "name": "spongeBobdSaved",
          "payloadFormat": Object {
            "properties": Object {
              "manualreferenceKeyName": Object {
                "description": "manualreferenceKeyName",
                "name": "manualreferenceKeyName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "shortPanda": Object {
                "description": "shortPanda",
                "name": "shortPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
            },
            "type": "object",
          },
        },
      ],
    },
    Object {
      "classname": "InvalidRootComponent",
      "inputs": Array [
        Object {
          "name": "referenceId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [],
    },
    Object {
      "classname": "FullComponent",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarotFull",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarorLess",
      "inputs": undefined,
      "outputs": undefined,
    },
  ],
}
`;

exports[`Transpiler integration test FullComponent.tsx match expectation 1`] = `
Object {
  "file": "FullComponent.tsx",
  "postContent": "import { BearerFetch, BearerRef, BearerState, Component, _BackendFunction, FunctionType, Event, EventEmitter, scopedT, scopedP, State, Watch, Prop } from '@bearer/core';
type Panda = {
    fullPandaName: string;
};
@Component({
    tag: \\"bearer-full-component\\"
})
export class FullComponent {
    private fetcher: BearerFetch;
    @BearerState()
    @State()
    attachedPullRequests: Array<any>;
    @BearerState({ statePropName: 'goats' })
    @State()
    ducks: Array<any>;
    private fetchResource: BearerFetch;
    @Event({ eventName: \\"bearer-sponge-bob-anevent\\" })
    anEvent: EventEmitter;
    screenRenderer = () => {
        return (<bearer-navigator-screen navigationTitle=\\"Last Screen\\" renderFunc={() => [<h1>Hello Partick</h1>]}/>);
    };
    render() {
        return (<bearer-navigator>
        <bearer-navigator-auth-screen integrationId=\\"SPONGE_BOB\\"/>
        <bearer-navigator-screen navigationTitle=\\"First Screen\\" renderFunc={() => [<bearer-scrollable fetcher={this.fetcher}/>]}/>
        <bearer-navigator-screen navigationTitle=\\"First Screen\\" renderFunc={() => [<h1>
            <bearer-i18n key=\\"titles.firstScreen\\" default=\\"Complex one\\" scope={this.INTEGRATION_ID}/>
          </h1>,
            <bearer-scrollable fetcher={this.fetcher}/>,
            <span>{translate('text.paragraphs.firstSpan', 'this text is fine {{value}}', { value: 'Sponge bobd' })}</span>,
            <span>{pluralize('text.paragraphs.firstSpan', 0, 'Missing translation {{count}}')}</span>]}/>
        <bearer-navigator-screen navigationTitle={({ data }) => data.name} renderFunc={() => [<bearer-scrollable fetcher={this.fetcher}/>]}/>

        <bearer-navigator-screen renderFunc={({ data, next, prev }) => (<last-screen next={next} complete={({ complete }) => {
            console.log('complete');
            complete();
        }}/>)}/>
        {this.screenRenderer()}
      </bearer-navigator>);
    }
    private saveSetup: BearerFetch<string>;
    @Event({ eventName: \\"bearer-sponge-bob-setupsaved\\" })
    setupSaved: EventEmitter;
    @State()
    setupInitial: string;
    @State()
    setup: string;
    @Prop({ \\"mutable\\": true })
    setupId: string;
    @Watch(\\"setup\\")
    setupSavedWatcher(newValue) {
        this.saveSetup({ setup: newValue, referenceId: this.setupId }).then(({ referenceId, data }) => {
            this.setupSaved.emit({ referenceId, setup: data || this.setup });
            this.setupId = referenceId;
        });
        this.setupInitial = null;
    }
    private fetcherRetrieveSetup;
    _loadSetup = () => {
        this.fetcherRetrieveSetup({ referenceId: this.setupId }).then(({ data }: {
            data: string;
        }) => {
            if (data) {
                this.setupInitial = data;
            }
        });
    };
    constructor() {
        _BackendFunction('ListRepositories')(this, \\"fetcher\\");
        _BackendFunction('getPullRequest', FunctionType.FetchData)(this, \\"fetchResource\\");
        _BackendFunction(\\"saveSetup\\")(this, \\"saveSetup\\");
        _BackendFunction(\\"retrieveSetup\\")(this, \\"fetcherRetrieveSetup\\");
    }
    get INTEGRATION_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
        if (this.setupId) {
            this._loadSetup();
        }
    }
    @Watch(\\"attachedPullRequests\\")
    _notifyBearerStateHandler_attachedPullRequests(newValue: any) {
        this.bearerContext.update(\\"attachedPullRequests\\", newValue);
    }
    @Watch(\\"ducks\\")
    _notifyBearerStateHandler_ducks(newValue: any) {
        this.bearerContext.update(\\"goats\\", newValue);
    }
    componentWillLoad() {
        this.bearerContext.subscribe(this);
    }
    componentDidUnload() {
        this.bearerContext.unsubscribe(this);
    }
    bearerUpdateFromState = state => {
        this.attachedPullRequests = state[\\"attachedPullRequests\\"];
        this.ducks = state[\\"goats\\"];
    };
}
var translate = scopedT(\\"SPONGE_BOB\\");
var pluralize = scopedP(\\"SPONGE_BOB\\");
",
}
`;

exports[`Transpiler integration test RootComponent.tsx has correct manifest generated 1`] = `
Object {
  "file": "RootComponent.tsx",
  "manifest": Array [
    Object {
      "classname": "AttachPullRequestAction",
      "inputs": Array [
        Object {
          "name": "farmerId",
          "type": "string",
        },
        Object {
          "name": "goatId",
          "type": "string",
        },
        Object {
          "name": "feedPandaId",
          "type": "string",
        },
        Object {
          "name": "shortPandaId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [
        Object {
          "eventName": "bearer-sponge-bob-inlinedefinition",
          "name": "inlineDefinition",
          "payloadFormat": Object {
            "properties": Object {
              "inlineName": Object {
                "description": "inlineName",
                "name": "inlineName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "inlineNumber": Object {
                "description": "inlineNumber",
                "name": "inlineNumber",
                "required": true,
                "schema": Object {
                  "type": "number",
                },
              },
              "other": Object {
                "description": "other",
                "name": "other",
                "required": true,
                "schema": Object {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "properties": Object {
                    "fullPandaName": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "fullPandaName",
                  ],
                  "type": "object",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-feedpandasaved",
          "name": "feedPandaSaved",
          "payloadFormat": Object {
            "properties": Object {
              "feedPanda": Object {
                "description": "feedPanda",
                "name": "feedPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
              "referenceId": Object {
                "description": "referenceId",
                "name": "referenceId",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-spongebobdsaved",
          "name": "spongeBobdSaved",
          "payloadFormat": Object {
            "properties": Object {
              "manualreferenceKeyName": Object {
                "description": "manualreferenceKeyName",
                "name": "manualreferenceKeyName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "shortPanda": Object {
                "description": "shortPanda",
                "name": "shortPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
            },
            "type": "object",
          },
        },
      ],
    },
    Object {
      "classname": "InvalidRootComponent",
      "inputs": Array [
        Object {
          "name": "referenceId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [],
    },
    Object {
      "classname": "FullComponent",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarotFull",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarorLess",
      "inputs": undefined,
      "outputs": undefined,
    },
  ],
}
`;

exports[`Transpiler integration test RootComponent.tsx match expectation 1`] = `
Object {
  "file": "RootComponent.tsx",
  "postContent": "import { BearerFetch, BearerState, _BackendFunction, FunctionType, BearerRef, Event, EventEmitter, Component, Listen, State, Watch, Prop } from '@bearer/core';
type Farmer = {
    fullName: string;
};
type Panda = {
    fullPandaName: string;
};
@Component({
    tag: \\"bearer-AttachPullRequest\\",
    shadow: true,
    styleUrl: \\"./ok.css\\"
})
export class AttachPullRequestAction {
    private fetcher: BearerFetch;
    @BearerState()
    @State()
    attachedPullRequests: Array<any>;
    @BearerState({ statePropName: 'goats' })
    @State()
    ducks: Array<any>;
    private fetchResource: BearerFetch;
    @Event({ eventName: \\"bearer-sponge-bob-inlinedefinition\\" })
    inlineDefinition: EventEmitter;
    render() {
        return (<bearer-authorized integrationId=\\"SPONGE_BOB\\">
        <bearer-scrollable fetcher={this.fetcher}/>
        <span>Something that must be kept</span>
      </bearer-authorized>);
    }
    @State()
    farmer: BearerRef<Farmer>;
    @Listen(\\"body:bearer-sponge-bob-farmersaved\\")
    farmerIdChanged(event) {
        if (this.farmerId !== event.detail.referenceId) {
            if (!this.farmerId) {
                this.farmerId = event.detail.referenceId;
            }
        }
        else {
            this._loadFarmer();
        }
    }
    _loadFarmer = () => {
        this.fetcherRetrieveFarmer({ referenceId: this.farmerId }).then(({ data }: {
            data: BearerRef<Farmer>;
        }) => {
            if (data) {
                this.farmer = data;
            }
        });
    };
    private fetcherRetrieveFarmer;
    @Watch(\\"farmerId\\")
    _watchFarmer(newValueName: string) {
        if (newValueName) {
            this._loadFarmer();
        }
    }
    @Prop({ \\"mutable\\": true })
    farmerId: string;
    @State()
    goat: BearerRef<{
        aString: string;
        aNumber: number;
        panda: Panda;
    }>;
    @Listen(\\"body:bearer-sponge-bob-goatmilked\\")
    goatIdChanged(event) {
        if (this.goatId !== event.detail.referenceId) {
            if (!this.goatId) {
                this.goatId = event.detail.referenceId;
            }
        }
        else {
            this._loadGoat();
        }
    }
    _loadGoat = () => {
        this.fetcherRetrieveGoat({ referenceId: this.goatId }).then(({ data }: {
            data: BearerRef<{
                aString: string;
                aNumber: number;
                panda: Panda;
            }>;
        }) => {
            if (data) {
                this.goat = data;
            }
        });
    };
    private fetcherRetrieveGoat;
    @Watch(\\"goatId\\")
    _watchGoat(newValueName: string) {
        if (newValueName) {
            this._loadGoat();
        }
    }
    @Prop({ \\"mutable\\": true })
    goatId: string;
    private saveFeedPanda: BearerFetch<BearerRef<Panda>>;
    @Event({ eventName: \\"bearer-sponge-bob-feedpandasaved\\" })
    feedPandaSaved: EventEmitter;
    @State()
    feedPandaInitial: BearerRef<Panda>;
    @State()
    feedPanda: BearerRef<Panda>;
    @Prop({ \\"mutable\\": true })
    feedPandaId: string;
    @Watch(\\"feedPanda\\")
    feedPandaSavedWatcher(newValue) {
        this.saveFeedPanda({ feedPanda: newValue, referenceId: this.feedPandaId }).then(({ referenceId, data }) => {
            this.feedPandaSaved.emit({ referenceId, feedPanda: data || this.feedPanda });
            this.feedPandaId = referenceId;
        });
        this.feedPandaInitial = null;
    }
    private fetcherRetrieveFeedPanda;
    _loadFeedPanda = () => {
        this.fetcherRetrieveFeedPanda({ referenceId: this.feedPandaId }).then(({ data }: {
            data: BearerRef<Panda>;
        }) => {
            if (data) {
                this.feedPandaInitial = data;
            }
        });
    };
    private manualFunctionName: BearerFetch<BearerRef<{
        inlineName: string;
    }>>;
    @Event({ eventName: \\"bearer-sponge-bob-spongebobdsaved\\" })
    spongeBobdSaved: EventEmitter;
    @State()
    shortPandaInitial: BearerRef<{
        inlineName: string;
    }>;
    @State()
    shortPanda: BearerRef<{
        inlineName: string;
    }>;
    @Prop({ \\"mutable\\": true })
    shortPandaId: string;
    @Watch(\\"manualpropertyWatchedName\\")
    spongeBobdSavedWatcher(newValue) {
        this.manualFunctionName({ manuaLFunctionPropertyName: newValue, manualfunctionReferenceIdKeyName: this.shortPandaId }).then(({ referenceId: manualreferenceKeyName, data }) => {
            this.spongeBobdSaved.emit({ manualreferenceKeyName, shortPanda: data || this.shortPanda });
            this.shortPandaId = manualreferenceKeyName;
        });
        this.shortPandaInitial = null;
    }
    private fetcherRetrieveShortPanda;
    _loadShortPanda = () => {
        this.fetcherRetrieveShortPanda({ manualfunctionReferenceIdKeyName: this.shortPandaId }).then(({ data }: {
            data: BearerRef<{
                inlineName: string;
            }>;
        }) => {
            if (data) {
                this.shortPandaInitial = data;
            }
        });
    };
    constructor() {
        _BackendFunction('ListRepositories')(this, \\"fetcher\\");
        _BackendFunction('getPullRequest', FunctionType.FetchData)(this, \\"fetchResource\\");
        _BackendFunction(\\"retrieveFarmer\\")(this, \\"fetcherRetrieveFarmer\\");
        _BackendFunction(\\"retrieveGoat\\")(this, \\"fetcherRetrieveGoat\\");
        _BackendFunction(\\"saveFeedPanda\\")(this, \\"saveFeedPanda\\");
        _BackendFunction(\\"retrieveFeedPanda\\")(this, \\"fetcherRetrieveFeedPanda\\");
        _BackendFunction(\\"manualFunctionName\\")(this, \\"manualFunctionName\\");
        _BackendFunction(\\"retrieveShortPanda\\")(this, \\"fetcherRetrieveShortPanda\\");
    }
    get INTEGRATION_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
        if (this.farmerId) {
            this._loadFarmer();
        }
        if (this.feedPandaId) {
            this._loadFeedPanda();
        }
        if (this.shortPandaId) {
            this._loadShortPanda();
        }
    }
    @Watch(\\"attachedPullRequests\\")
    _notifyBearerStateHandler_attachedPullRequests(newValue: any) {
        this.bearerContext.update(\\"attachedPullRequests\\", newValue);
    }
    @Watch(\\"ducks\\")
    _notifyBearerStateHandler_ducks(newValue: any) {
        this.bearerContext.update(\\"goats\\", newValue);
    }
    componentWillLoad() {
        this.bearerContext.subscribe(this);
    }
    componentDidUnload() {
        this.bearerContext.unsubscribe(this);
    }
    bearerUpdateFromState = state => {
        this.attachedPullRequests = state[\\"attachedPullRequests\\"];
        this.ducks = state[\\"goats\\"];
    };
    @Event({ eventName: \\"bearer-attachpullrequest-prop-set\\", bubbles: true, cancelable: true })
    propSetEmitter: EventEmitter;
    @Watch(\\"farmerId\\")
    farmerIdPropSetWatcher(newValue) {
        this.propSetEmitter.emit({ farmerId: newValue });
    }
    @Watch(\\"goatId\\")
    goatIdPropSetWatcher(newValue) {
        this.propSetEmitter.emit({ goatId: newValue });
    }
    @Watch(\\"feedPandaId\\")
    feedPandaIdPropSetWatcher(newValue) {
        this.propSetEmitter.emit({ feedPandaId: newValue });
    }
    @Watch(\\"shortPandaId\\")
    shortPandaIdPropSetWatcher(newValue) {
        this.propSetEmitter.emit({ shortPandaId: newValue });
    }
}
",
}
`;

exports[`Transpiler integration test exportObject.ts has correct manifest generated 1`] = `
Object {
  "file": "exportObject.ts",
  "manifest": Array [
    Object {
      "classname": "AttachPullRequestAction",
      "inputs": Array [
        Object {
          "name": "farmerId",
          "type": "string",
        },
        Object {
          "name": "goatId",
          "type": "string",
        },
        Object {
          "name": "feedPandaId",
          "type": "string",
        },
        Object {
          "name": "shortPandaId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [
        Object {
          "eventName": "bearer-sponge-bob-inlinedefinition",
          "name": "inlineDefinition",
          "payloadFormat": Object {
            "properties": Object {
              "inlineName": Object {
                "description": "inlineName",
                "name": "inlineName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "inlineNumber": Object {
                "description": "inlineNumber",
                "name": "inlineNumber",
                "required": true,
                "schema": Object {
                  "type": "number",
                },
              },
              "other": Object {
                "description": "other",
                "name": "other",
                "required": true,
                "schema": Object {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "properties": Object {
                    "fullPandaName": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "fullPandaName",
                  ],
                  "type": "object",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-feedpandasaved",
          "name": "feedPandaSaved",
          "payloadFormat": Object {
            "properties": Object {
              "feedPanda": Object {
                "description": "feedPanda",
                "name": "feedPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
              "referenceId": Object {
                "description": "referenceId",
                "name": "referenceId",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-spongebobdsaved",
          "name": "spongeBobdSaved",
          "payloadFormat": Object {
            "properties": Object {
              "manualreferenceKeyName": Object {
                "description": "manualreferenceKeyName",
                "name": "manualreferenceKeyName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "shortPanda": Object {
                "description": "shortPanda",
                "name": "shortPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
            },
            "type": "object",
          },
        },
      ],
    },
    Object {
      "classname": "InvalidRootComponent",
      "inputs": Array [
        Object {
          "name": "referenceId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [],
    },
    Object {
      "classname": "FullComponent",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarotFull",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarorLess",
      "inputs": undefined,
      "outputs": undefined,
    },
  ],
}
`;

exports[`Transpiler integration test exportObject.ts match expectation 1`] = `
Object {
  "file": "exportObject.ts",
  "postContent": "class SpongeBobHelper {
    private name: string;
    constructor(name: string) {
        this.name = name;
    }
}
export class PatrickHelper {
    constructor() {
    }
}
export default {
    spongeHelper: SpongeBobHelper,
    patrickHelper: PatrickHelper
};
",
}
`;

exports[`Transpiler integration test invalidRootComponent.tsx has correct manifest generated 1`] = `
Object {
  "file": "invalidRootComponent.tsx",
  "manifest": Array [
    Object {
      "classname": "AttachPullRequestAction",
      "inputs": Array [
        Object {
          "name": "farmerId",
          "type": "string",
        },
        Object {
          "name": "goatId",
          "type": "string",
        },
        Object {
          "name": "feedPandaId",
          "type": "string",
        },
        Object {
          "name": "shortPandaId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [
        Object {
          "eventName": "bearer-sponge-bob-inlinedefinition",
          "name": "inlineDefinition",
          "payloadFormat": Object {
            "properties": Object {
              "inlineName": Object {
                "description": "inlineName",
                "name": "inlineName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "inlineNumber": Object {
                "description": "inlineNumber",
                "name": "inlineNumber",
                "required": true,
                "schema": Object {
                  "type": "number",
                },
              },
              "other": Object {
                "description": "other",
                "name": "other",
                "required": true,
                "schema": Object {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "properties": Object {
                    "fullPandaName": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "fullPandaName",
                  ],
                  "type": "object",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-feedpandasaved",
          "name": "feedPandaSaved",
          "payloadFormat": Object {
            "properties": Object {
              "feedPanda": Object {
                "description": "feedPanda",
                "name": "feedPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
              "referenceId": Object {
                "description": "referenceId",
                "name": "referenceId",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-spongebobdsaved",
          "name": "spongeBobdSaved",
          "payloadFormat": Object {
            "properties": Object {
              "manualreferenceKeyName": Object {
                "description": "manualreferenceKeyName",
                "name": "manualreferenceKeyName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "shortPanda": Object {
                "description": "shortPanda",
                "name": "shortPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
            },
            "type": "object",
          },
        },
      ],
    },
    Object {
      "classname": "InvalidRootComponent",
      "inputs": Array [
        Object {
          "name": "referenceId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [],
    },
    Object {
      "classname": "FullComponent",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarotFull",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarorLess",
      "inputs": undefined,
      "outputs": undefined,
    },
  ],
}
`;

exports[`Transpiler integration test invalidRootComponent.tsx match expectation 1`] = `
Object {
  "file": "invalidRootComponent.tsx",
  "postContent": "import { BearerFetch, BearerState, _BackendFunction, FunctionType, Component, Prop, Element, Watch, State } from '@bearer/core';
@Component({
    tag: \\"bearer-attach-pull-request\\",
    shadow: false
})
export class InvalidRootComponent {
    private fetcher: BearerFetch;
    @BearerState()
    @State()
    attachedPullRequests: Array<any>;
    @BearerState({ statePropName: 'goats' })
    @State()
    ducks: Array<any>;
    private fetchResource: BearerFetch;
    render() {
        return <bearer-scrollable fetcher={this.fetcher}/>;
    }
    @Prop()
    referenceId: string;
    @Element()
    el: HTMLElement;
    constructor() {
        _BackendFunction('ListRepositories')(this, \\"fetcher\\");
        _BackendFunction('getPullRequest', FunctionType.FetchData)(this, \\"fetchResource\\");
    }
    get INTEGRATION_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
    }
    @Watch(\\"attachedPullRequests\\")
    _notifyBearerStateHandler_attachedPullRequests(newValue: any) {
        this.bearerContext.update(\\"attachedPullRequests\\", newValue);
    }
    @Watch(\\"ducks\\")
    _notifyBearerStateHandler_ducks(newValue: any) {
        this.bearerContext.update(\\"goats\\", newValue);
    }
    componentWillLoad() {
        this.bearerContext.subscribe(this);
    }
    componentDidUnload() {
        this.bearerContext.unsubscribe(this);
    }
    bearerUpdateFromState = state => {
        this.attachedPullRequests = state[\\"attachedPullRequests\\"];
        this.ducks = state[\\"goats\\"];
    };
}
",
}
`;

exports[`Transpiler integration test overrides-decorator.tsx has correct manifest generated 1`] = `
Object {
  "file": "overrides-decorator.tsx",
  "manifest": Array [
    Object {
      "classname": "AttachPullRequestAction",
      "inputs": Array [
        Object {
          "name": "farmerId",
          "type": "string",
        },
        Object {
          "name": "goatId",
          "type": "string",
        },
        Object {
          "name": "feedPandaId",
          "type": "string",
        },
        Object {
          "name": "shortPandaId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [
        Object {
          "eventName": "bearer-sponge-bob-inlinedefinition",
          "name": "inlineDefinition",
          "payloadFormat": Object {
            "properties": Object {
              "inlineName": Object {
                "description": "inlineName",
                "name": "inlineName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "inlineNumber": Object {
                "description": "inlineNumber",
                "name": "inlineNumber",
                "required": true,
                "schema": Object {
                  "type": "number",
                },
              },
              "other": Object {
                "description": "other",
                "name": "other",
                "required": true,
                "schema": Object {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "properties": Object {
                    "fullPandaName": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "fullPandaName",
                  ],
                  "type": "object",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-feedpandasaved",
          "name": "feedPandaSaved",
          "payloadFormat": Object {
            "properties": Object {
              "feedPanda": Object {
                "description": "feedPanda",
                "name": "feedPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
              "referenceId": Object {
                "description": "referenceId",
                "name": "referenceId",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-spongebobdsaved",
          "name": "spongeBobdSaved",
          "payloadFormat": Object {
            "properties": Object {
              "manualreferenceKeyName": Object {
                "description": "manualreferenceKeyName",
                "name": "manualreferenceKeyName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "shortPanda": Object {
                "description": "shortPanda",
                "name": "shortPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
            },
            "type": "object",
          },
        },
      ],
    },
    Object {
      "classname": "InvalidRootComponent",
      "inputs": Array [
        Object {
          "name": "referenceId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [],
    },
    Object {
      "classname": "FullComponent",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarotFull",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarorLess",
      "inputs": undefined,
      "outputs": undefined,
    },
  ],
}
`;

exports[`Transpiler integration test overrides-decorator.tsx match expectation 1`] = `
Object {
  "file": "overrides-decorator.tsx",
  "postContent": "import { Component, _BackendFunction, BearerFetch, FunctionType, Prop, Element } from '@bearer/core';
@Component({
    tag: \\"bearer-overrides-decorator-full\\"
})
class OverridesDecorarotFull {
    private fetcher: BearerFetch;
    private memberFetcher: BearerFetch;
    constructor() {
        _BackendFunction('collectionFunction')(this, \\"fetcher\\");
        _BackendFunction('collectionFunction', FunctionType.FetchData)(this, \\"memberFetcher\\");
    }
    componentWillLoad() {
        console.log('componentWillLoad');
    }
    componentDidUnload() {
        console.log('componentDidUnload');
    }
    @Prop()
    referenceId: string;
    @Element()
    el: HTMLElement;
    get INTEGRATION_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
        console.log('componentDidLoad');
    }
}
",
}
`;

exports[`Transpiler integration test overrides-decorator-less.1.tsx has correct manifest generated 1`] = `
Object {
  "file": "overrides-decorator-less.1.tsx",
  "manifest": Array [
    Object {
      "classname": "AttachPullRequestAction",
      "inputs": Array [
        Object {
          "name": "farmerId",
          "type": "string",
        },
        Object {
          "name": "goatId",
          "type": "string",
        },
        Object {
          "name": "feedPandaId",
          "type": "string",
        },
        Object {
          "name": "shortPandaId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [
        Object {
          "eventName": "bearer-sponge-bob-inlinedefinition",
          "name": "inlineDefinition",
          "payloadFormat": Object {
            "properties": Object {
              "inlineName": Object {
                "description": "inlineName",
                "name": "inlineName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "inlineNumber": Object {
                "description": "inlineNumber",
                "name": "inlineNumber",
                "required": true,
                "schema": Object {
                  "type": "number",
                },
              },
              "other": Object {
                "description": "other",
                "name": "other",
                "required": true,
                "schema": Object {
                  "$schema": "http://json-schema.org/draft-07/schema#",
                  "properties": Object {
                    "fullPandaName": Object {
                      "type": "string",
                    },
                  },
                  "required": Array [
                    "fullPandaName",
                  ],
                  "type": "object",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-feedpandasaved",
          "name": "feedPandaSaved",
          "payloadFormat": Object {
            "properties": Object {
              "feedPanda": Object {
                "description": "feedPanda",
                "name": "feedPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
              "referenceId": Object {
                "description": "referenceId",
                "name": "referenceId",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
            },
            "type": "object",
          },
        },
        Object {
          "eventName": "bearer-sponge-bob-spongebobdsaved",
          "name": "spongeBobdSaved",
          "payloadFormat": Object {
            "properties": Object {
              "manualreferenceKeyName": Object {
                "description": "manualreferenceKeyName",
                "name": "manualreferenceKeyName",
                "required": true,
                "schema": Object {
                  "type": "string",
                },
              },
              "shortPanda": Object {
                "description": "shortPanda",
                "name": "shortPanda",
                "required": true,
                "schema": Object {
                  "type": "any",
                },
              },
            },
            "type": "object",
          },
        },
      ],
    },
    Object {
      "classname": "InvalidRootComponent",
      "inputs": Array [
        Object {
          "name": "referenceId",
          "type": "string",
        },
        Object {
          "name": "setupId",
          "type": "string",
        },
      ],
      "outputs": Array [],
    },
    Object {
      "classname": "FullComponent",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarotFull",
      "inputs": undefined,
      "outputs": undefined,
    },
    Object {
      "classname": "OverridesDecorarorLess",
      "inputs": undefined,
      "outputs": undefined,
    },
  ],
}
`;

exports[`Transpiler integration test overrides-decorator-less.1.tsx match expectation 1`] = `
Object {
  "file": "overrides-decorator-less.1.tsx",
  "postContent": "import { Component, Prop } from '@bearer/core';
@Component({
    tag: \\"bearer-overrides-decorator-less\\"
})
class OverridesDecorarorLess {
    constructor() {
    }
    componentWillLoad() {
        console.log('componentWillLoad');
    }
    componentDidUnload() {
        console.log('componentDidUnload');
    }
    get INTEGRATION_ID() { return \\"SPONGE_BOB\\"; }
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() {
        if (this.setupId) {
            this.bearerContext.setupId = this.setupId;
        }
        console.log('componentDidLoad');
    }
}
",
}
`;
