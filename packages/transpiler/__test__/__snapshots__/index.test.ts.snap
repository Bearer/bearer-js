// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transpiler integration test FullComponent.tsx match expectation 1`] = `
Object {
  "file": "FullComponent.tsx",
  "postContent": "import { Component, Intent, BearerFetch, IntentType, BearerState, Prop, Watch, State } from '@bearer/core';
@Component({
    tag: 'full-component'
})
export class FullComponent {
    private fetcher: BearerFetch;
    @RetrieveStateIntent()
    retrieve: BearerFetch;
    @BearerState()
    @State()
    attachedPullRequests: Array<any>;
    @BearerState({ statePropName: 'goats' })
    @State()
    ducks: Array<any>;
    private fetchResource: BearerFetch;
    render() {
        return <bearer-scrollable fetcher={this.fetcher}/>;
    }
    constructor() { Intent('ListRepositories')(this, \\"fetcher\\"); Intent('getPullRequest', IntentType.GetResource)(this, \\"fetchResource\\"); }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop()
    BEARER_ID: string;
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
    @Watch(\\"attachedPullRequests\\")
    _notifyBearerStateHandler_attachedPullRequests(newValue) { this.bearerContext.update(\\"attachedPullRequests\\", newValue); }
    @Watch(\\"ducks\\")
    _notifyBearerStateHandler_ducks(newValue) { this.bearerContext.update('goats', newValue); }
    componentWillLoad() { this.bearerContext.subscribe(this); }
    componentDidUnload() { this.bearerContext.unsubscribe(this); }
    bearerUpdateFromState = state => { this.attachedPullRequests = state[\\"attachedPullRequests\\"]; this.ducks = state['goats']; };
    @Prop()
    referenceId: string;
}
",
}
`;

exports[`Transpiler integration test RootComponent.tsx match expectation 1`] = `
Object {
  "file": "RootComponent.tsx",
  "postContent": "import { Component, Intent, BearerFetch, IntentType, BearerState, Prop, Watch, State } from '@bearer/core';
@Component({
    tag: \\"attach-pull-request-action\\",
    styleUrl: \\"attachPullRequestAction.css\\"
})
export class AttachPullRequest {
    private fetcher: BearerFetch;
    @RetrieveStateIntent()
    retrieve: BearerFetch;
    @BearerState()
    @State()
    attachedPullRequests: Array<any>;
    @BearerState({ statePropName: 'goats' })
    @State()
    ducks: Array<any>;
    private fetchResource: BearerFetch;
    render() {
        return <bearer-scrollable fetcher={this.fetcher}/>;
    }
    constructor() { Intent('ListRepositories')(this, \\"fetcher\\"); Intent('getPullRequest', IntentType.GetResource)(this, \\"fetchResource\\"); }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop()
    BEARER_ID: string;
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } }
    @Watch(\\"attachedPullRequests\\")
    _notifyBearerStateHandler_attachedPullRequests(newValue) { this.bearerContext.update(\\"attachedPullRequests\\", newValue); }
    @Watch(\\"ducks\\")
    _notifyBearerStateHandler_ducks(newValue) { this.bearerContext.update('goats', newValue); }
    componentWillLoad() { this.bearerContext.subscribe(this); }
    componentDidUnload() { this.bearerContext.unsubscribe(this); }
    bearerUpdateFromState = state => { this.attachedPullRequests = state[\\"attachedPullRequests\\"]; this.ducks = state['goats']; };
    @Prop()
    referenceId: string;
}
",
}
`;

exports[`Transpiler integration test exportObject.ts match expectation 1`] = `
Object {
  "file": "exportObject.ts",
  "postContent": "class SpongeBobHelper {
    private name: string;
    constructor(name: string) {
        this.name = name;
    }
}
export class PatrickHelper {
    constructor() { }
}
export default {
    spongeHelper: SpongeBobHelper,
    patrickHelper: PatrickHelper
};
",
}
`;

exports[`Transpiler integration test overrides-decorator.tsx match expectation 1`] = `
Object {
  "file": "overrides-decorator.tsx",
  "postContent": "import { Component, Intent, BearerFetch, IntentType, Prop } from '@bearer/core';
@Component({
    tag: 'overrides-decorator-full'
})
class OverridesDecorarotFull {
    private fetcher: BearerFetch;
    private memberFetcher: BearerFetch;
    constructor() { Intent('collectionIntent')(this, \\"fetcher\\"); Intent('collectionIntent', IntentType.GetResource)(this, \\"memberFetcher\\"); }
    componentWillLoad() {
        console.log('componentWillLoad');
    }
    componentDidUnload() {
        console.log('componentDidUnload');
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop()
    BEARER_ID: string;
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } console.log('componentDidLoad'); }
}
",
}
`;

exports[`Transpiler integration test overrides-decorator-less.1.tsx match expectation 1`] = `
Object {
  "file": "overrides-decorator-less.1.tsx",
  "postContent": "import { Component, Prop } from '@bearer/core';
@Component({
    tag: 'overrides-decorator-less'
})
class OverridesDecorarotLess {
    constructor() { }
    componentWillLoad() {
        console.log('componentWillLoad');
    }
    componentDidUnload() {
        console.log('componentDidUnload');
    }
    get SCENARIO_ID() { return \\"SPONGE_BOB\\"; }
    @Prop()
    BEARER_ID: string;
    @Prop({ \\"context\\": \\"bearer\\" })
    bearerContext: any;
    @Prop()
    setupId: string;
    componentDidLoad() { if (this.setupId) {
        this.bearerContext.setupId = this.setupId;
    } console.log('componentDidLoad'); }
}
",
}
`;
