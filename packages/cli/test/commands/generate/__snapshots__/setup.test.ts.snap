// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate:setup APIKEY creates setup files 1`] = `
"/*
  The purpose of this component is to save integration credentials.
  This file has been generated automatically. Edit it at your own risk :-)
*/

import { RootComponent, State, Prop, Output } from '@bearer/core'
import '@bearer/ui'
import { FieldSet } from '@bearer/ui/lib/collection/components/Forms/Fieldset'

@RootComponent({
  name: 'setup-action',
})
export class SetupAction {
  @Prop() display: 'inline' | 'block' = 'inline'

  @State() fields = new FieldSet([{\\"type\\":\\"password\\",\\"label\\":\\"Api Key\\",\\"controlName\\":\\"apiKey\\"}])

  @Output() setup: any

  setupSubmitHandler = (e: CustomEvent) => {
    this.setup = e.detail
  }

  render() {
    return (
      <bearer-setup
        display={this.display}
        onSetupSubmit={this.setupSubmitHandler}
        integrationId='BEARER_INTEGRATION_ID'
        fields={this.fields}
      />
    )
  }
}
"
`;

exports[`generate:setup APIKEY creates setup files 2`] = `
"/*
  The purpose of this component is to show integration setup id.
  This file has been generated automatically. Edit it at your own risk :-)
*/

import { RootComponent, Input } from \\"@bearer/core\\";
import \\"@bearer/ui\\";

@RootComponent({
  name: 'setup-view',
})
export class SetupView {
  @Input() setup: any

  render() {
    return (
      <bearer-setup-display integrationId=\\"BEARER_INTEGRATION_ID\\" setupId={(this as any).setupId} />
    )
  }
}
"
`;

exports[`generate:setup APIKEY creates setup files 3`] = `
"import { TAPIKEYAuthContext, FetchData, TFetchActionEvent, TFetchPromise } from '@bearer/functions'

export default class SaveSetupFunction extends FetchData implements FetchData<ReturnedData, any, TAPIKEYAuthContext> {
  async action(event: TFetchActionEvent<Params, TAPIKEYAuthContext>): TFetchPromise< ReturnedData> {
    return { state: event.params.setup, data: [] }
  }
}

export type Params = {
  setup: any
}

export type State = {
  apiKey: string
}


export type ReturnedData = {
}
"
`;

exports[`generate:setup APIKEY creates setup files 4`] = `
"import { TAPIKEYAuthContext, FetchData, TFetchActionEvent, TFetchPromise } from '@bearer/functions'

export default class RetrieveSetupFunction extends FetchData implements FetchData<ReturnedData, any, TAPIKEYAuthContext> {
  async action(event: TFetchActionEvent<Params, TAPIKEYAuthContext>): TFetchPromise<ReturnedData> {
    return { data: { referenceId: event.params.referenceId, ...event.context.reference } }
  }
}

export type Params = {
  setup: any
  referenceId: string
}

export type ReturnedData = {
  apiKey: string
  referenceId: string
}
"
`;

exports[`generate:setup BASIC creates setup files 1`] = `
"/*
  The purpose of this component is to save integration credentials.
  This file has been generated automatically. Edit it at your own risk :-)
*/

import { RootComponent, State, Prop, Output } from '@bearer/core'
import '@bearer/ui'
import { FieldSet } from '@bearer/ui/lib/collection/components/Forms/Fieldset'

@RootComponent({
  name: 'setup-action',
})
export class SetupAction {
  @Prop() display: 'inline' | 'block' = 'inline'

  @State() fields = new FieldSet([{\\"type\\":\\"text\\",\\"label\\":\\"Username\\",\\"controlName\\":\\"username\\"},{\\"type\\":\\"password\\",\\"label\\":\\"Password\\",\\"controlName\\":\\"password\\"}])

  @Output() setup: any

  setupSubmitHandler = (e: CustomEvent) => {
    this.setup = e.detail
  }

  render() {
    return (
      <bearer-setup
        display={this.display}
        onSetupSubmit={this.setupSubmitHandler}
        integrationId='BEARER_INTEGRATION_ID'
        fields={this.fields}
      />
    )
  }
}
"
`;

exports[`generate:setup BASIC creates setup files 2`] = `
"/*
  The purpose of this component is to show integration setup id.
  This file has been generated automatically. Edit it at your own risk :-)
*/

import { RootComponent, Input } from \\"@bearer/core\\";
import \\"@bearer/ui\\";

@RootComponent({
  name: 'setup-view',
})
export class SetupView {
  @Input() setup: any

  render() {
    return (
      <bearer-setup-display integrationId=\\"BEARER_INTEGRATION_ID\\" setupId={(this as any).setupId} />
    )
  }
}
"
`;

exports[`generate:setup BASIC creates setup files 3`] = `
"import { TBASICAuthContext, FetchData, TFetchActionEvent, TFetchPromise } from '@bearer/functions'

export default class SaveSetupFunction extends FetchData implements FetchData<ReturnedData, any, TBASICAuthContext> {
  async action(event: TFetchActionEvent<Params, TBASICAuthContext>): TFetchPromise< ReturnedData> {
    return { state: event.params.setup, data: [] }
  }
}

export type Params = {
  setup: any
}

export type State = {
  username: string
  password: string
}

export type ReturnedData = {}
"
`;

exports[`generate:setup BASIC creates setup files 4`] = `
"import { TBASICAuthContext, FetchData, TFetchActionEvent, TFetchPromise } from '@bearer/functions'

export default class RetrieveSetupFunction extends FetchData implements FetchData<ReturnedData, any, TBASICAuthContext> {
  async action(event: TFetchActionEvent<Params, TBASICAuthContext>): TFetchPromise<ReturnedData> {
    return { data: { referenceId: event.params.referenceId, ...event.context.reference } }
  }
}

export type Params = {
  setup: any
  referenceId: string
}

export type ReturnedData = {
  username: string
  password: string
  referenceId: string
}
"
`;

exports[`generate:setup OAUTH2 creates setup files 1`] = `
"/*
  The purpose of this component is to save integration credentials.
  This file has been generated automatically. Edit it at your own risk :-)
*/

import { RootComponent, State, Prop, Output } from '@bearer/core'
import '@bearer/ui'
import { FieldSet } from '@bearer/ui/lib/collection/components/Forms/Fieldset'

@RootComponent({
  name: 'setup-action',
})
export class SetupAction {
  @Prop() display: 'inline' | 'block' = 'inline'

  @State() fields = new FieldSet([{\\"type\\":\\"text\\",\\"label\\":\\"Client ID\\",\\"controlName\\":\\"clientID\\"},{\\"type\\":\\"password\\",\\"label\\":\\"Client Secret\\",\\"controlName\\":\\"clientSecret\\"}])

  @Output() setup: any

  setupSubmitHandler = (e: CustomEvent) => {
    this.setup = e.detail
  }

  render() {
    return (
      <bearer-setup
        display={this.display}
        onSetupSubmit={this.setupSubmitHandler}
        integrationId='BEARER_INTEGRATION_ID'
        fields={this.fields}
      />
    )
  }
}
"
`;

exports[`generate:setup OAUTH2 creates setup files 2`] = `
"/*
  The purpose of this component is to show integration setup id.
  This file has been generated automatically. Edit it at your own risk :-)
*/

import { RootComponent, Input } from \\"@bearer/core\\";
import \\"@bearer/ui\\";

@RootComponent({
  name: 'setup-view',
})
export class SetupView {
  @Input() setup: any

  render() {
    return (
      <bearer-setup-display integrationId=\\"BEARER_INTEGRATION_ID\\" setupId={(this as any).setupId} />
    )
  }
}
"
`;

exports[`generate:setup OAUTH2 creates setup files 3`] = `
"import { TOAUTH2AuthContext, FetchData, TFetchActionEvent, TFetchPromise } from '@bearer/functions'

export default class SaveSetupFunction extends FetchData implements FetchData<ReturnedData, any, TOAUTH2AuthContext> {
  async action(event: TFetchActionEvent<Params, TOAUTH2AuthContext>): TFetchPromise< ReturnedData> {
    return { state: event.params.setup, data: [] }
  }
}

export type Params = {
  setup: any
}

export type State = {
  accessToken: string
}

export type ReturnedData = {}
"
`;

exports[`generate:setup OAUTH2 creates setup files 4`] = `
"import { TOAUTH2AuthContext, FetchData, TFetchActionEvent, TFetchPromise } from '@bearer/functions'

export default class RetrieveSetupFunction extends FetchData implements FetchData<ReturnedData, any, TOAUTH2AuthContext> {
  async action(event: TFetchActionEvent<Params, TOAUTH2AuthContext>): TFetchPromise<ReturnedData> {
    return { data: { referenceId: event.params.referenceId, ...event.context.reference } }
  }
}

export type Params = {
  setup: any
  referenceId: string
}

export type ReturnedData = {
  accessToken: string
  referenceId: string
}
"
`;
