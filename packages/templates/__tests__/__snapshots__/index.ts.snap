// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Templates apiKey has FetchData 1`] = `
"
  static action(context: TapiKeyContext, params: any, body: any, callback: TFetchDataCallback) {
    //... your code goes here
    // use the client defined in client.ts to fetch real object like that:
    // Client(context.authAccess.apiKey).get('/people')
    //   .then(({ data }) => {
    //     callback({ data })
    //   })
    //   .catch((error) => {
    //     callback({ error: error.toString() })
    //   })
    callback({ data: []})
  }
  "
`;

exports[`Templates apiKey has RetrieveState 1`] = `
"
  static action(_context: TapiKeyContext, _params: any, state, callback: TRetrieveStateCallback) {
    callback({ data: state })
  }
  "
`;

exports[`Templates apiKey has SaveState 1`] = `
"
  static action(
    _context: TapiKeyContext,
    _params: any,
    body: any,
    state: any,
    callback: TSaveStateCallback
  ): void {
    const { item: { name } } = body
    const { items = [] }: any = state
    const newItem: any = { name }

    callback({
      state: {
        ...state,
        items: [...items, newItem]
      },
      data: [...items, newItem]
    })
  }
  "
`;

exports[`Templates basicAuth has FetchData 1`] = `
"
  static action(context: TbasicAuthContext, params: any, body: any, callback: TFetchDataCallback) {
    //... your code goes here
    // use the client defined in client.ts to fetch real object like that:
    // Client(
    //   context.authAccess.username,
    //   context.authAccess.password
    // ).get('/people').then(({ data }) => {
    //     callback({ data })
    //   })
    //   .catch((error) => {
    //     callback({ error: error.toString() })
    //   })
    callback({ data: []})
  }
  "
`;

exports[`Templates basicAuth has RetrieveState 1`] = `
"
  static action(_context: TbasicAuthContext, _params: any, state, callback: TRetrieveStateCallback) {
    callback({ data: state })
  }
  "
`;

exports[`Templates basicAuth has SaveState 1`] = `
"
  static action(
    _context: TbasicAuthContext,
    _params: any,
    body: any,
    state: any,
    callback: TSaveStateCallback
  ): void {
    const { item: { name } } = body
    const { items = [] }: any = state
    const newItem: any = { name }

    callback({
      state: {
        ...state,
        items: [...items, newItem]
      },
      data: [...items, newItem]
    })
  }
  "
`;

exports[`Templates noAuth has FetchData 1`] = `
"
  static action(context: TnoAuthContext, params: any, body: any, callback: TFetchDataCallback) {
    //... your code goes here
    callback({ data: []})
  }"
`;

exports[`Templates noAuth has RetrieveState 1`] = `
"
  static action(_context: TnoAuthContext, _params: any, state, callback: TRetrieveStateCallback) {
    callback({ data: state })
  }
  "
`;

exports[`Templates noAuth has SaveState 1`] = `
"
  static action(
    _context: TnoAuthContext,
    _params: any,
    body: any,
    state: any,
    callback: TSaveStateCallback
  ): void {
    const { item: { name } } = body
    const { items = [] }: any = state
    const newItem: any = { name }

    callback({
      state: {
        ...state,
        items: [...items, newItem]
      },
      data: [...items, newItem]
    })
  }
  "
`;

exports[`Templates oauth2 has FetchData 1`] = `
"
  static action(context: Toauth2Context, params: any, body: any, callback: TFetchDataCallback) {
    //... your code goes here
    // use the client defined in client.ts to fetch real object like that:
    // Client(context.authAccess.accessToken).get('/people').then(({ data }) => {
    //     callback({ data })
    //   })
    //   .catch((error) => {
    //     callback({ error: error.toString() })
    //   })
    callback({ data: []})
  }"
`;

exports[`Templates oauth2 has RetrieveState 1`] = `
"
  static action(_context: Toauth2Context, _params: any, state, callback: TRetrieveStateCallback) {
    callback({ data: state })
  }
  "
`;

exports[`Templates oauth2 has SaveState 1`] = `
"
  static action(
    _context: Toauth2Context,
    _params: any,
    body: any,
    state: any,
    callback: TSaveStateCallback
  ): void {
    const { item: { name } } = body
    const { items = [] }: any = state
    const newItem: any = { name }

    callback({
      state: {
        ...state,
        items: [...items, newItem]
      },
      data: [...items, newItem]
    })
  }
  "
`;
